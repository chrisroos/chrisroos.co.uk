---
blog_post: true
guid: bdad36d1-fc62-4c97-bfdc-c910ee33a466
title: Textmate command to display Active Record column attributes
filter: textile
created_at: 2006-07-14 08:18:00 +01:00
layout: blog
---
I find myself constantly visiting either the console or the mysql command line to check out the attributes (columns) of "active record":http://api.rubyonrails.com/classes/ActiveRecord/Base.html objects.

I know there is a "plugin":http://blogs.pragprog.com/cgi-bin/pragdave.cgi/Tech/Ruby/AnnotateModels.rdoc by "Dave Thomas":http://blogs.pragprog.com/cgi-bin/pragdave.cgi that places the table structure within the model code itself.  To be honest I've never tried this and it might well suffice (although I'm not 100% convinced I like the idea).

Anyhoo, I just spent some time whilst on the train hacking together a basic "textmate":http://macromates.com/ command that displays a tooltip containing the table structure.  It's very basic (though you wouldn't have thought it based on the amount of time it took me together[1]); but seems to work ok.

!http://farm1.static.flickr.com/236/460082493_49ff4cd1ed_o.png!

The code is below.  You'll need to add a ruby command in the ruby textmate bundle, setting the intput to 'selected text' or 'nothing', the output to 'show as tooltip' and preferably a hotkey that isn't one of the ones you use every day (however tempting that is).

bc.. #! /usr/local/bin/ruby

project = ENV['TM_PROJECT_DIRECTORY']
word = ENV['TM_CURRENT_WORD']

require "\#{project}/config/boot"
require "\#{project}/config/environment"

klass = Object.const_get(word) rescue nil
if klass and klass.class == Class and klass.ancestors.include?(ActiveRecord::Base)
  columns = klass.columns_hash

  data = []
  data += [%w[column primary sql_type default]]
  data += [%w[------ ------- -------- -------]]
  data += columns.collect { |col, attrs| [col, attrs.primary.to_s, attrs.sql_type.to_s, attrs.default.to_s] }

  STDOUT << data.inject('') do |output, array|
    output + array.inject('') { |row_str, value| row_str + value.ljust(20) } + "\n"
  end
elsif klass and klass.class == Class and not klass.ancestors.include?(ActiveRecord::Base)
  STDOUT << "\#{word} is not an Active Record derived class"
else
  STDOUT << "\#{word} was not recognised as a class"
end

p. It relies on you having your entire rails project (the folder right above app, config, script etc) open in textmate (in order to find the config files).  With that, just click on the name of an active record class (it has to be the actual class name at present, it'd be cool if it also worked based on the class definition you are currently in too) and hit your hotkey of choice (best to use the one you assigned to this command).  Hey presto, a tooltip containing your table structure.

One odd thing I've noticed is that it never recognises standard class constants.  It should display 'this is not an active record derived class' but instead always displays 'was not recognised as a class'.  Oh well.

Anyone find this remotely useful or want to finish off what I've started?

fn1. I spent ages trying to develop within the textmate bundle editor before realising it'd be a helluva lot quicker and easier to develop in textmate proper.  Hmmm.
