---
summary:    I'm hoping this data might be useful for someone else trying to develop code to sign requests to Amazon Web Services
blog_post:  true
title:      Test Data for Version 2 of the Amazon Web Services Signing Protocol
created_at: 2009-02-01 12:56:26.435181 +00:00
guid:       41a108e3-8a8b-4e1c-8c08-65f8ba7ae5a4
layout:     blog
filter:     haml
---
:textile
  This sort of data would have been incredibly handy when I was "trying to implement":/blog/2009-01-31-implementing-version-2-of-the-amazon-aws-http-request-signature-in-ruby the "Amazon request signing functionality":http://docs.amazonwebservices.com/AmazonSimpleDB/2007-11-07/DeveloperGuide/REST_RESTAuth.html.  It might be of use to anyone else that wants to implement it in another language.

  I chose to test using the "List domains":http://docs.amazonwebservices.com/AmazonSimpleDB/2007-11-07/DeveloperGuide/SDB_API_ListDomains.html method as it seemed fairly straightforward.  These are request parameters I used (you'll obviously need to use the exact same values when testing your implementation).

  <pre class="code">
  AWSAccessKeyId = access
  Action = ListDomains
  SignatureMethod = HmacSHA256
  SignatureVersion = 2
  Timestamp = 2009-02-01T12:53:20+00:00
  Version = 2007-11-07
  </pre>

  The following numbered steps correspond to the numbered steps in the "Authenticating REST Requests":http://docs.amazonwebservices.com/AmazonSimpleDB/2007-11-07/DeveloperGuide/REST_RESTAuth.html part of the "Amazon Simple DB developer guide":http://docs.amazonwebservices.com/AmazonSimpleDB/2007-11-07/DeveloperGuide.

  1. We URL encode the above request parameters (the key value pairs) and sort them to generate this 'canonicalized query string'.

  <pre class="code">
  AWSAccessKeyId=access&Action=ListDomains&SignatureMethod=HmacSHA256&SignatureVersion=2&Timestamp=2009-02-01T12%3A53%3A20%2B00%3A00&Version=2007-11-07
  </pre>

  2. We use this canonicalized query string within this string that we're going to hash.

  <pre class="code">
  GET
  sdb.amazonaws.com
  /
  AWSAccessKeyId=access&Action=ListDomains&SignatureMethod=HmacSHA256&SignatureVersion=2&Timestamp=2009-02-01T12%3A53%3A20%2B00%3A00&Version=2007-11-07
  </pre>

  3 and 4. We generate the following, "base64":http://en.wikipedia.org/wiki/Base64 encoded, "HMAC":http://en.wikipedia.org/wiki/HMAC of the string above using the SHA256 hashing algorithm and a secret key of 'secret'.

  <pre class="code">
  okj96/5ucWBSc1uR2zXVfm6mDHtgfNv657rRtt/aunQ=
  </pre>

  5. We URL encode this signature and add it to the list of request parameters (note that the order of the request parameters doesn't matter for the request itself).

  <pre class="code">
  Action=ListDomains&Signature=okj96%2F5ucWBSc1uR2zXVfm6mDHtgfNv657rRtt%2FaunQ%3D&Version=2007-11-07&AWSAccessKeyId=access&Timestamp=2009-02-01T12%3A53%3A20%2B00%3A00&SignatureVersion=2&SignatureMethod=HmacSHA256
  </pre>

  Once you're happy that you've implemented the request signing functionality correctly you can use your real security credentials (access and secret keys) and test using "curl":http://curl.haxx.se/.  Note that the HTTP method, sdb host (sdb.amazonaws.com) and path (/) must match those that were used in the string that we hashed.

  <pre class="code">
  curl -X"GET" "https://sdb.amazonaws.com/?Action=ListDomains&Signature=okj96%2F5ucWBSc1uR2zXVfm6mDHtgfNv657rRtt%2FaunQ%3D&Version=2007-11-07&AWSAccessKeyId=access&Timestamp=2009-02-01T12%3A53%3A20%2B00%3A00&SignatureVersion=2&SignatureMethod=HmacSHA256"
  </pre>

  That should be it.  It possibly would've made more sense to generate these as tests using "test/unit":http://www.ruby-doc.org/stdlib/libdoc/test/unit/rdoc/ so that you could easily convert them to the "xunit":http://en.wikipedia.org/wiki/XUnit tool of your choice before implementing your solution.  Actually, what I believe would have made sense was for Amazon to release such a set of tests themselves.
